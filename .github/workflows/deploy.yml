name: Oscars Work CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Docker Login
      - run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} # UPDATE SECRETS FOR PROD

      # Build Client and run test
      # - run: docker build -t blueprintbarbers/client-test -f ./client/dockerfile.dev ./client
      # - run: docker run -e CI=true blueprintbarbers/client-test npm test

      # # Build Server and run test
      # - run: docker build -t blueprintbarbers/server-test -f ./server/dockerfile.dev ./server
      # - run: docker run -e CI=true blueprintbarbers/react-test npm test

      # Build Production Images
      - run: docker build -t oscardel13/blueprintbarbers ./server

      # Push Images to docker hub
      - run: docker push oscardel13/blueprintbarbers

  deploy_server:
    needs: build
    name: Deploy to EC2 instance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: SSH into EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOSTNAME }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}

          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker-compose down
            docker-compose up --pull=true -d

  deploy_client:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awscli --upgrade --user
          echo 'export PATH="$HOME/.local/bin:$PATH"' >> $HOME/.bashrc
          source $HOME/.bashrc
        shell: bash

      - name: Install dependencies (inside the client directory)
        run: |
          cd client
          npm install --legacy-peer-deps
      
      - name: Build React app (inside the client directory)
        run: |
          cd client
          CI=false npm run build

      - name: Deploy to S3
        run: |
          aws s3 cp client/build/ s3://empower-canine/ --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_CLIENT_ID }} --paths '/*'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}